{"version":3,"sources":["webpack:///./src/components/TableRow.tsx","webpack:///./src/components/ButtonPopupMenu.tsx","webpack:///./src/const/i18n.ts","webpack:///./src/components/SystemNetwork/SystemNetworkLegend.tsx","webpack:///./src/components/SystemNetwork/index.tsx","webpack:///./src/components/container/SystemNetworkControl/networkLinkConverter.ts","webpack:///./src/components/container/SystemNetworkControl/SystemInTableView.tsx","webpack:///./src/components/Ipv4TextField.tsx","webpack:///./src/const/validatorRegex.ts","webpack:///./src/components/container/SystemNetworkControl/SystemNetworkInfo.tsx","webpack:///./src/components/container/SystemNetworkControl/SystemNetworkControlInput.tsx","webpack:///./src/components/container/SystemNetworkControl/index.tsx","webpack:///./src/components/LoaderError.tsx","webpack:///./src/components/Loader.tsx","webpack:///./src/hoc/withLoadConnection.tsx","webpack:///./src/components/container/THome/index.tsx","webpack:///./src/components/routable/Home/index.tsx"],"names":["theme","nopadding","height","classes","children","selected","hover","tabIndex","onClick","materialUiTableRowClass","consumerData","isCompact","className","tableRowDisplay","props","super","_handleClick","event","target","currentTarget","this","setState","draft","anchorEl","_handleClose","optionClickEvent","state","id","btnLabel","options","variant","open","Boolean","onClose","PaperProps","style","maxHeight","width","marginLeft","map","option","idx","key","label","handleClick","Language","Translation","getTranslator","ENGLISH","lang","ShowType","NodeType","StatusType","root","position","bottom","left","_unExpand","zoomOut","_expand","zoomIn","_toggleShow","toggleStore","toggleAgent","name","checked","STORES","showStore","AGENTS","showAgent","initShowStore","initShowAgent","component","row","control","onChange","color","networkRef","PARENT_SIZE","CHILD_SIZE","force","LINE_DISTANCE","ALPHA_MIN","zoomWidth","zoomHeight","_zoomIn","svg","d3","current","attr","_zoomOut","_toggleShowMaster","show","selectAll","newState","replace","_toggleShowAgent","_remapObject","data","links","newNodes","nodes","obj","ipAddress","hostname","connectionStatus","nodeType","group","source","_initForce","expWidth","expHeight","alphaMin","strength","on","d","x","y","_drawNodes","distance","enter","append","_displayRadius","_displayClass","call","_nodeDragStarted","_nodeDragged","_nodeDragEnded","nodeClickCallback","MASTER","CONNECTED_AUTHENTICATED","text","_renderTitle","_displayLabel","alpha","restart","_displayNodeColor","CONNECTED_UNAUTHENTICATED","DISCONNECTED","translate","storeName","active","alphaTarget","fx","fy","initData","language","newConnections","currMasterIdx","currMasterGroup","offset","length","newNode","push","GENERAL","nodeIdx","currNode","ref","viewBox","a","getStoreName","agents","agentMOId","split","getConnectionStatus","status","convertNetworkDataIntoSystemNetwork","networkData","countries","country","regions","region","stores","store","storeId","agent","agentAuthState","agentType","convertNodeInfoIntoSystemNetwork","overflow","connSuccess","cursor","backgroundColor","palette","success","main","connWarning","warn","connError","error","_renderAgentRow","ctryId","regionId","colorClass","getColor","info","TableRow","agentVersion","_renderRegionRow","_renderStoreRow","TextMaskIpV4Address","inputRef","other","mask","placeholderChar","keepCharPositions","showMask","etc","InputProps","inputComponent","IP_VALIDATION_REGEX","isIPAddressValid","test","SystemNetworkInfo","mapPropsToValues","validate","values","errors","handleSubmit","formikBag","openSideBar","handleClose","handleMoreInfoOnClick","isSubmitting","handleChange","anchor","onSubmit","inset","chip","statusOk","disabled","ButtonPopupMenu","required","margin","helperText","value","type","padding","checkHostIp","eventFilter","resetForm","_toggleOpen","isOpen","openDialog","aria-labelledby","container","spacing","item","xs","onOpen","addButton","right","buttonPosition","viewButton","systemNetworkRef","counter","_handleInputDialogClose","isInputDialogOpen","_onSubmitAddNetwork","output","addNodes","_onClickAddNetwork","_onClickViewNetwork","isTableView","_onClickNode","isInfoOpen","infoDetail","_handleInfoClose","_renderTableView","aria-label","_renderGraphView","_renderDisplay","withLoadConnection","dispatchFunc","Component","dispatch","isEmpty","isError","isLoading","errorMessage","emptyMessage","response","fetchFunc","mapStateToProps","withRouter","history","items"],"mappings":"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","file":"11.bundle.js","sourcesContent":["`use strict`\n\nimport * as React from 'react';\nimport { DashboardConsumer } from \"../shared/Context\";\nimport MaterialUITableRow from '@material-ui/core/TableRow';\nimport { withStyles, createStyles, WithStyles, Theme } from '@material-ui/core/styles';\n\nconst styles = (theme:Theme) => createStyles({\n  nopadding: {\n    height: \"unset\"\n  }\n});\n\ninterface TableRowProps extends WithStyles<typeof styles>{\n  selected?: boolean,\n  hover?:boolean,\n  tabIndex?: number,\n  onClick?: any,\n  materialUiTableRowClass?: object\n}\n\nconst TableRow: React.SFC<TableRowProps> = ({classes, children, selected, hover, tabIndex, onClick, materialUiTableRowClass}) => {\n  function tableRowDisplay(isCompact:boolean) {\n    return (\n      <MaterialUITableRow\n        classes={materialUiTableRowClass}\n        className={isCompact?classes.nopadding:\"\"}\n        selected={selected}\n        hover={hover}\n        tabIndex={tabIndex}\n        onClick={onClick}\n        >\n        {children}\n      </MaterialUITableRow>);\n  }\n\n\n  return (\n    <DashboardConsumer>\n    { consumerData => (\n      tableRowDisplay(consumerData.isCompact)\n    )}\n    </DashboardConsumer>\n  );\n}\n\n\nexport default withStyles(styles)(TableRow);\n","`use strict`\n\nimport * as React from 'react';\nimport produce from \"immer\";\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Button from '@material-ui/core/Button';\n\ninterface OptionModal {\n  label: string,\n  handleClick: () => void\n}\n\ninterface PopupMenuProps {\n  id: string;\n  btnLabel: string,\n  options: Array<OptionModal>;\n}\n\ninterface PopupMenuState {\n  anchorEl: HTMLElement;\n}\n\nclass PopupMenu extends React.Component<PopupMenuProps, PopupMenuState> {\n  constructor(props:PopupMenuProps) {\n    super(props);\n    this.state = {\n      anchorEl: null\n    }\n  }\n\n  _handleClick = (event: React.MouseEvent<any>) => {\n    const target = event.currentTarget;\n    this.setState(\n      produce<PopupMenuState>(draft => {\n        draft.anchorEl = target;\n      })\n    );\n  }\n\n  _handleClose = (optionClickEvent:() => void) => () => {\n    this.setState(\n      produce<PopupMenuState>(draft => {\n        draft.anchorEl = null;\n\n        if(optionClickEvent != null) {\n          optionClickEvent();\n        }\n      })\n    );\n  };\n\n  render() {\n    const {anchorEl} = this.state;\n    const {id, btnLabel, options} = this.props;\n\n    return (\n      <React.Fragment>\n        <Button variant=\"contained\" onClick={this._handleClick} id={id}>\n          {btnLabel}\n        </Button>\n        <Menu\n          id={id}\n          anchorEl={anchorEl}\n          open={Boolean(anchorEl)}\n          onClose={this._handleClose(null)}\n          PaperProps={{\n              style: {\n                maxHeight: 300,\n                width: 200,\n                marginLeft: '20px'\n              },\n            }}\n        >\n          {options.map((option:OptionModal, idx:number) => (\n            <MenuItem key={`${option.label}_${idx}`} onClick={this._handleClose(option.handleClick)}>\n              {option.label}\n            </MenuItem>\n          ))}\n        </Menu>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default PopupMenu;\n","export enum Language {\n  ENGLISH = \"EN\"\n}\n\nexport interface LocaleDefinition {\n  hostname: string;\n  ipAddress: string;\n  storeName: string;\n  [key: string]: string;\n}\n\ninterface LocaleAvailable {\n  [key: string]: LocaleDefinition;\n}\n\n\nconst Translation:LocaleAvailable = {\n  \"EN\": {\n      \"hostname\": \"Hostname\",\n      \"ipAddress\": \"IP Address\",\n      \"storeName\": \"Store Name\"\n  }\n}\n\nconst defaultLanguage = Language.ENGLISH;\n\nexport const getTranslator = (lang:string) => {\n  const translator = Translation[lang];\n  return translator;\n}\n","`use strict`\n\nimport * as React from 'react';\nimport produce from \"immer\";\nimport Button from '@material-ui/core/Button';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport { withStyles, createStyles, WithStyles, Theme } from '@material-ui/core/styles';\n\nenum ShowType {\n  STORES = \"stores\",\n  AGENTS = \"agents\"\n}\n\nconst styles = (theme:Theme) => createStyles({\n  root: {\n    position: 'absolute',\n    bottom: 0,\n    left: '20px'\n  }\n});\n\ninterface SystemNetworkLegendProps extends WithStyles<typeof styles> {\n  initShowStore: boolean;\n  initShowAgent: boolean;\n  toggleStore: (state: boolean) => void;\n  toggleAgent: (state:boolean) => void;\n  zoomIn: () => void;\n  zoomOut: () => void;\n}\n\ninterface SystemNetworkLegendState {\n  showStore: boolean;\n  showAgent: boolean;\n}\n\nclass SystemNetworkLegend extends React.PureComponent<SystemNetworkLegendProps, SystemNetworkLegendState> {\n  constructor(props:SystemNetworkLegendProps) {\n    super(props);\n    this.state = {\n      showStore: props.initShowStore,\n      showAgent: props.initShowAgent\n    }\n  }\n\n  _unExpand = () => {\n    this.props.zoomOut();\n  }\n\n  _expand = () => {\n    this.props.zoomIn();\n  }\n\n  _toggleShow = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const {toggleStore, toggleAgent} = this.props;\n    const {name, checked} = event.target;\n\n    this.setState(\n      produce<SystemNetworkLegendState>(draft => {\n        switch(name) {\n          case ShowType.STORES:\n            draft.showStore = !draft.showStore;\n            toggleStore(draft.showStore);\n            break;\n          case ShowType.AGENTS:\n            draft.showAgent = !draft.showAgent;\n            toggleAgent(draft.showAgent);\n            break;\n        }\n      })\n    );\n  }\n\n  render () {\n    const {classes} = this.props;\n    const {showStore, showAgent} = this.state;\n\n    return (\n      <FormControl component=\"div\" className={classes.root}>\n        <FormLabel component=\"label\">Legend:</FormLabel>\n        <FormGroup row>\n          <FormControlLabel\n            control={\n              <Switch\n                checked={showStore}\n                name={ShowType.STORES}\n                onChange={this._toggleShow}\n              />\n            }\n            label=\"Stores\"\n          />\n          <FormControlLabel\n            control={\n              <Switch\n                checked={showAgent}\n                name={ShowType.AGENTS}\n                onChange={this._toggleShow}\n              />\n            }\n            label=\"Agents\"\n          />\n          <FormControlLabel\n            control={\n              <Button onClick={this._unExpand} color=\"secondary\">\n                -\n              </Button>\n            }\n            label=\"Zoom Out\"\n          />\n          <FormControlLabel\n            control={\n              <Button onClick={this._expand} color=\"secondary\">\n                +\n              </Button>\n            }\n            label=\"Zoom In\"\n          />\n        </FormGroup>\n      </FormControl>\n    );\n  }\n}\n\nexport default withStyles(styles)(SystemNetworkLegend);\n","`use strict`\n\nimport * as React from 'react';\nimport * as d3 from 'd3';\nimport {Simulation} from 'd3';\nimport {SimulationNodeDatum, SimulationLinkDatum} from 'd3-force';\nimport {getTranslator, Language, LocaleDefinition} from \"../../const/i18n\";\nimport SystemNetworkLegend from './SystemNetworkLegend';\nimport green from '@material-ui/core/colors/green';\nimport amber from '@material-ui/core/colors/amber';\nimport red from '@material-ui/core/colors/red';\n\n/**\n* Fully envision with pure d3 js\n**/\n\nexport enum NodeType {\n  MASTER,\n  GENERAL\n}\n\nexport enum StatusType {\n  CONNECTED_UNAUTHENTICATED,\n  CONNECTED_AUTHENTICATED,\n  DISCONNECTED\n}\n\nexport interface NodeInfoModal {\n  name: string;\n  ipAddress: string;\n  hostname: string;\n  nodeType: NodeType;\n  connectionStatus: StatusType;\n  group: string;\n}\n\nexport interface NodeDataModal {\n  nodes: Array<NodeInfoModal>;\n  links: Array<SimulationLinkDatum<SimulationNodeDatum>>;\n}\n\nexport interface SystemNetworkProps {\n  width: number;\n  height: number;\n  initData: NodeDataModal;\n  language: string;\n  nodeClickCallback: (nodeInfo: NodeInfoModal) => () => void;\n}\n\nclass SystemNetwork extends React.Component<SystemNetworkProps, {}> {\n  private networkRef = React.createRef<SVGSVGElement>();\n  private PARENT_SIZE = 10;\n  private CHILD_SIZE = this.PARENT_SIZE / 2;\n  private translate:LocaleDefinition;\n  private data:NodeDataModal;\n  private force:Simulation<any, any> = null;\n  private LINE_DISTANCE = this.PARENT_SIZE * 2;\n  private ALPHA_MIN = 0.01;\n  private zoomWidth:number = 100;\n  private zoomHeight:number = 100;\n\n  constructor(props: SystemNetworkProps) {\n    super(props);\n    this.data = this._remapObject(props.initData);\n    this.translate = getTranslator(props.language);\n    this.zoomWidth = props.width;\n    this.zoomHeight = props.height;\n  }\n\n  componentDidMount() {\n    this._initForce();\n    this._drawNodes();\n  }\n\n  //Cannot be update!!\n  shouldComponentUpdate() {\n    return false;\n  }\n\n  _zoomIn = () => {\n    const svg = d3.select(this.networkRef.current);\n    this.zoomWidth -= 10;\n    this.zoomHeight -= 10;\n    svg.attr(\"viewBox\", `0 0 ${this.zoomWidth} ${this.zoomHeight}`);\n  }\n\n  _zoomOut = () => {\n    const svg = d3.select(this.networkRef.current);\n    this.zoomWidth += 10;\n    this.zoomHeight += 10;\n    svg.attr(\"viewBox\", `0 0 ${this.zoomWidth} ${this.zoomHeight}`);\n  }\n\n  addNodes(newConnections: Array<NodeInfoModal>) {\n    const {links, nodes} = this.data;\n    let currMasterIdx = -1;\n    let currMasterGroup = \"\";\n    let offset = nodes.length;\n\n    newConnections.map((newNode:NodeInfoModal, idx:number) => {\n      nodes.push({\n        name: newNode.name,\n        ipAddress: newNode.ipAddress,\n        hostname: newNode.hostname,\n        nodeType: newNode.nodeType,\n        connectionStatus: newNode.connectionStatus,\n        group: newNode.group\n      });\n\n      if(newNode.nodeType === NodeType.MASTER) {\n        currMasterIdx = offset + idx;\n        currMasterGroup = newNode.group;\n      }\n      else if(newNode.nodeType === NodeType.GENERAL) {\n        if(newNode.group === currMasterGroup) {\n          links.push({\n            source: offset + idx,\n            target: currMasterIdx\n          });\n        }\n        else { //search for idx\n          for(let nodeIdx = 0; nodeIdx < nodes.length; nodeIdx++) {\n            const currNode = nodes[nodeIdx];\n            if(currNode.group === newNode.group && currNode.nodeType === NodeType.MASTER) {\n              links.push({\n                source: offset + idx,\n                target: nodeIdx\n              });\n              break;\n            }\n          }\n\n        }\n      }\n    });\n\n    this._drawNodes();\n  }\n\n  _toggleShowMaster = (show: boolean) => {\n    const svg = d3.select(this.networkRef.current);\n    if(show) {\n      const selectAll = svg.selectAll(\"circle.master\");\n      const state = selectAll.attr('class');\n      const newState = state.replace(\" hide\",\"\");\n      selectAll.attr('class', `${newState}`);\n    }\n    else {\n      const selectAll = svg.selectAll(\"circle.master\");\n      const state = selectAll.attr('class');\n      selectAll.attr('class', `${state} hide`);\n    }\n  }\n\n  _toggleShowAgent = (show: boolean) => {\n    const svg = d3.select(this.networkRef.current);\n    if(show) {\n      const selectAll = svg.selectAll(\"circle.agent\");\n      const state = selectAll.attr('class');\n      const newState = state.replace(\" hide\",\"\");\n      selectAll.attr('class', `${newState}`);\n    }\n    else {\n      const selectAll = svg.selectAll(\"circle.agent\");\n      const state = selectAll.attr('class');\n      selectAll.attr('class', `${state} hide`);\n    }\n  }\n\n  _remapObject = (data: NodeDataModal) => {\n    const links = data.links;\n    const nodes = data.nodes;\n\n    const newNodes = nodes.map((obj:NodeInfoModal, idx: number) => {\n      return {\n        name: obj.name,\n        ipAddress: obj.ipAddress,\n        hostname: obj.hostname,\n        connectionStatus: obj.connectionStatus,\n        nodeType: obj.nodeType,\n        group: obj.group\n      }\n    });\n\n    const newLinks = links.map((obj:any, idx: number) => {\n      return {\n        source: obj.source,\n        target: obj.target\n      }\n    });\n\n    return {\n      links: newLinks,\n      nodes: newNodes\n    }\n  }\n\n  _initForce = () => {\n    const {width, height} = this.props;\n    const {PARENT_SIZE, CHILD_SIZE, ALPHA_MIN} = this;\n    const svg = d3.select(this.networkRef.current);\n    const expWidth = (width - PARENT_SIZE);\n    const expHeight = (height - PARENT_SIZE);\n\n    this.force = d3\n      .forceSimulation()\n      .alphaMin(ALPHA_MIN)\n      .force('charge', d3.forceManyBody().strength(-20))\n      .force('center', d3.forceCenter(width / 2, height / 2));\n\n    this.force.on('tick', () => {\n      svg\n        .selectAll('line')\n        .attr('x1', (d: any) => d.source.x)\n        .attr('y1', (d: any) => d.source.y)\n        .attr('x2', (d: any) => d.target.x)\n        .attr('y2', (d: any) => d.target.y);\n      svg\n        .selectAll('circle')\n        .attr('cx', (d: any) => {\n          if(d.x > expWidth) {\n            return expWidth;\n          }\n          if(d.x < 0) {\n            return 0;\n          }\n\n          return d.x;\n        })\n        .attr('cy', (d: any) => {\n          if(d.y > expHeight) {\n            return expHeight;\n          }\n          if(d.y < 0) {\n            return 0;\n          }\n\n          return d.y;\n        });\n      svg\n        .selectAll('g>text')\n        .attr('dx', (d: any) => {\n          return d.x;\n        })\n        .attr('dy', (d: any) => {\n          return d.y;\n        });\n    });\n  }\n\n  _drawNodes = () => {\n    const {width, height} = this.props;\n    const {PARENT_SIZE, CHILD_SIZE} = this;\n    const {nodes, links}= this._remapObject(this.data);\n\n    this.force\n      .nodes(nodes)\n      .force('link', d3.forceLink(links).distance(this.LINE_DISTANCE));\n\n    const svg = d3.select(this.networkRef.current);\n//    svg.select(\"*\").remove();\n\n    svg\n      .selectAll('line')\n      .data(links)\n      .enter()\n      .append('line');\n\n    //Append Node\n    const circleNode = svg\n      .selectAll('circle')\n      .data(nodes)\n      .enter()\n      .append<SVGCircleElement>('circle')\n      .attr('r', this._displayRadius)\n      .attr('class', this._displayClass)\n      .call(\n        d3\n          .drag()\n          .on('start', this._nodeDragStarted(this.force))\n          .on('drag', this._nodeDragged)\n          .on('end', this._nodeDragEnded(this.force)),\n      )\n      .on(\"click\", this.props.nodeClickCallback(\n          {\n            name: \"Store 01\",\n            ipAddress: \"201.200.200.200\",\n            hostname: \"\",\n            nodeType: NodeType.MASTER,\n            connectionStatus: StatusType.CONNECTED_AUTHENTICATED,\n            group: `1`,\n          }\n      ));\n    //Append title\n    circleNode.append<SVGTitleElement>('title').append<SVGTSpanElement>('tspan').text(this._renderTitle);\n    //\n    // //Append Node\n    svg\n      .selectAll('g>text')\n      .data(nodes)\n      .enter()\n      .append('g')\n      .append<SVGTextElement>('text')\n      .attr(\"x\", PARENT_SIZE)\n      .text(this._displayLabel)\n      .call(\n        d3\n          .drag()\n          .on('start', this._nodeDragStarted(this.force))\n          .on('drag', this._nodeDragged)\n          .on('end', this._nodeDragEnded(this.force)),\n      )\n\n    this.force.alpha(1).restart();\n  }\n\n  _displayNodeColor = (data:NodeInfoModal) => {\n    const connStatus = data.connectionStatus;\n    switch(connStatus) {\n      case StatusType.CONNECTED_AUTHENTICATED:\n      return \"connSuccess\";\n      case StatusType.CONNECTED_UNAUTHENTICATED:\n      return \"connWarning\";\n      case StatusType.DISCONNECTED:\n      return \"connError\";\n      default:\n      return \"\";\n    }\n  }\n\n  _displayClass = (data:NodeInfoModal) => {\n\n\n    switch(data.nodeType) {\n      case NodeType.MASTER:\n        return \"master newNode \" + this._displayNodeColor(data);\n      default:\n        return \"agent \" + this._displayNodeColor(data);\n    }\n  }\n\n  _renderTitle = (data:NodeInfoModal) => {\n    const {translate} = this;\n    return (`${translate.storeName}: ${data.name}\\n${translate.hostname}: ${data.hostname}\\n${translate.ipAddress}: ${data.ipAddress}`);\n  }\n\n  _displayLabel = (data:NodeInfoModal) => {\n    switch(data.nodeType) {\n      case NodeType.MASTER:\n        return data.name;\n      default:\n        return \"\";\n    }\n  }\n\n  _displayRadius = (data:NodeInfoModal) => {\n    switch(data.nodeType) {\n      case NodeType.MASTER:\n        return this.PARENT_SIZE;\n      default:\n        return this.CHILD_SIZE;\n    }\n  }\n\n  _nodeDragStarted = (force:any) => (d:SimulationNodeDatum) => {\n    !d3.event.active && force.alphaTarget(0.3).restart();\n    d.fx = d.x;\n    d.fy = d.y;\n  }\n\n  _nodeDragged = (d:SimulationNodeDatum) => {\n    d.fx = d3.event.x;\n    d.fy = d3.event.y;\n  }\n\n  _nodeDragEnded = (force:any) => (d:SimulationNodeDatum) => {\n    !d3.event.active && force.alphaTarget(0);\n    d.fx = null;\n    d.fy = null;\n  }\n\n  render() {\n    const {width, height} = this.props;\n    return (\n      <React.Fragment>\n        <svg width={width} height={height} ref={this.networkRef} viewBox={`0 0 ${this.zoomWidth} ${this.zoomHeight}`} className={\"wc-system-network\"}>\n          <style jsx>\n          {`\n            .wc-system-network :global(circle.connSuccess) {\n              fill: ${green[700]};\n            },\n            .wc-system-network :global(circle.connWarning) {\n              fill: ${amber[700]};\n            },\n            .wc-system-network :global(circle.connError) {\n              fill: ${red[700]};\n            }\n\n            .wc-system-network {\n              color: green;\n            }\n\n            .wc-system-network :global(line) {\n              stroke: #999999;\n              stroke-opacity: 0.6;\n              stroke-width: 1;\n            }\n\n            .wc-system-network :global(line.hide) {\n              display: none;\n            }\n\n            .wc-system-network :global(circle) {\n              //fill: rgb(31, 119, 180);\n            }\n\n            .wc-system-network :global(circle:hover) {\n              cursor: pointer;\n            }\n\n            .wc-system-network :global(circle.master) {\n              stroke: #FFFFFF;\n              stroke-width: 1.5;\n            }\n\n            .wc-system-network :global(circle.master.newNode) {\n              animation: a-blinker 5s linear;\n            }\n\n            .wc-system-network :global(circle.agent) {\n              stroke: #FFFFFF;\n              stroke-width: 1.5;\n            }\n\n            .wc-system-network :global(circle.master.hide) {\n              animation: a-hider 0.3s linear;\n              opacity: 0;\n            }\n\n            .wc-system-network :global(circle.agent.hide) {\n              animation: a-hider 0.3s linear;\n              opacity: 0;\n            }\n\n            @keyframes a-blinker {\n              10% {\n                fill: #333333;\n              }\n            }\n\n            @keyframes a-hider {\n              0% {\n                opacity: 1\n              }\n            }\n          `}\n          </style>\n        </svg>\n        <SystemNetworkLegend\n          initShowStore = {true}\n          initShowAgent = {true}\n          toggleStore = {this._toggleShowMaster}\n          toggleAgent = {this._toggleShowAgent}\n          zoomIn = {this._zoomIn}\n          zoomOut = {this._zoomOut}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default SystemNetwork;\n","import {NetworkDataModal, AgentDataModal} from \"./modal\";\nimport {SimulationNodeDatum, SimulationLinkDatum} from 'd3-force';\nimport {NodeInfoModal, NodeType, StatusType, NodeDataModal} from '../../SystemNetwork';\n\nconst AGENT_SEPERATOR_KEY = \"-\";\nconst MASTER_AGENT_IDENTIFIER = \"Master Agent\";\n\nexport const getStoreName = (agents:Array<AgentDataModal>) => {\n  if(agents && agents.length > 0) {\n    return agents[0].agentMOId.split(AGENT_SEPERATOR_KEY)[0];\n  }\n\n  return \"\";\n}\n\nexport const getConnectionStatus = (status:string, state:string) => {\n  if(status === \"connected\") {\n    if(state === \"authenticated\") {\n      return StatusType.CONNECTED_AUTHENTICATED;\n    }\n    else {\n      return StatusType.CONNECTED_UNAUTHENTICATED;\n    }\n  }\n  else {\n    return StatusType.DISCONNECTED;\n  }\n}\n\nexport const convertNetworkDataIntoSystemNetwork = (networkData: NetworkDataModal) => {\n  let nodes:Array<NodeInfoModal> = [];\n  networkData.countries.map((country) => {\n    country.regions.map((region) => {\n      region.stores.map((store) => {\n        let storeName = getStoreName(store.agents);\n        let storeId = store.id;\n        store.agents.map((agent) => {\n          nodes.push ({\n            name: storeName,\n            ipAddress: agent.ipAddress,\n            hostname: \"\",\n            connectionStatus: getConnectionStatus(agent.connectionStatus, agent.agentAuthState),\n            nodeType: agent.agentType === MASTER_AGENT_IDENTIFIER? NodeType.MASTER: NodeType.GENERAL,\n            group: `${storeId}`\n          });\n        });\n      })\n    });\n  });\n  return convertNodeInfoIntoSystemNetwork(nodes);\n}\n\nexport const convertNodeInfoIntoSystemNetwork = (newConnections: Array<NodeInfoModal>) => {\n  const links:Array<SimulationLinkDatum<SimulationNodeDatum>> = [];\n  const nodes:Array<NodeInfoModal> = [];\n  let currMasterIdx = -1;\n  let currMasterGroup = \"\";\n  let offset = nodes.length;\n\n  newConnections.map((newNode:NodeInfoModal, idx:number) => {\n    nodes.push({\n      name: newNode.name,\n      ipAddress: newNode.ipAddress,\n      hostname: newNode.hostname,\n      nodeType: newNode.nodeType,\n      connectionStatus: newNode.connectionStatus,\n      group: newNode.group\n    });\n\n    if(newNode.nodeType === NodeType.MASTER) {\n      currMasterIdx = offset + idx;\n      currMasterGroup = newNode.group;\n    }\n    else if(newNode.nodeType === NodeType.GENERAL) {\n      if(newNode.group === currMasterGroup) {\n        links.push({\n          source: offset + idx,\n          target: currMasterIdx\n        });\n      }\n      else { //search for idx\n        for(let nodeIdx = 0; nodeIdx < nodes.length; nodeIdx++) {\n          const currNode = nodes[nodeIdx];\n          if(currNode.group === newNode.group && currNode.nodeType === NodeType.MASTER) {\n            links.push({\n              source: offset + idx,\n              target: nodeIdx\n            });\n            break;\n          }\n        }\n      }\n    }\n  });\n\n  return {links: links, nodes: nodes};\n}\n","`use strict`\n\nimport * as React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport { withStyles, createStyles, WithStyles, Theme } from '@material-ui/core/styles';\nimport TableRow from '../../TableRow';\nimport {NetworkDataModal, CountryDataModal, RegionDataModal, StoreDataModal, AgentDataModal} from \"./modal\";\nimport {NodeInfoModal, StatusType, NodeType} from \"../../SystemNetwork\";\nimport {getStoreName, getConnectionStatus} from \"./networkLinkConverter\";\n\n\nconst styles = (theme:Theme) => createStyles({\n  root: {\n    overflow: \"auto\"\n  },\n  connSuccess: {\n    cursor: \"pointer\",\n    backgroundColor: (theme.palette as any).success.main\n  },\n  connWarning: {\n    cursor: \"pointer\",\n    backgroundColor: (theme.palette as any).warn.main\n  },\n  connError: {\n    cursor: \"pointer\",\n    backgroundColor: theme.palette.error.main\n  }\n});\n\ninterface SystemInTableViewProps extends WithStyles<typeof styles> {\n  networkData: NetworkDataModal;\n  nodeClickCallback: (nodeInfo: NodeInfoModal) => void;\n}\n\nconst SystemInTableView: React.SFC<SystemInTableViewProps> = ({classes, networkData, nodeClickCallback}) => {\n\n  function getColor(status:string, state: string) {\n    const connStatus = getConnectionStatus(status, state);\n    switch(connStatus) {\n      case StatusType.CONNECTED_AUTHENTICATED:\n      return classes.connSuccess;\n      case StatusType.CONNECTED_UNAUTHENTICATED:\n      return classes.connWarning;\n      default:\n      return classes.connError;\n    }\n  }\n\n  function _renderAgentRow(ctryId:number, regionId:number, storeId: number, agents:Array<AgentDataModal>) {\n    return agents.map((agent) => {\n      const colorClass = getColor(agent.connectionStatus, agent.agentAuthState);\n      const info = {\n        name: agent.agentMOId,\n        ipAddress: agent.ipAddress,\n        hostname: \"\",\n        nodeType: (agent.agentType === \"Master Agent\"?NodeType.MASTER: NodeType.GENERAL),\n        connectionStatus: getConnectionStatus(agent.connectionStatus, agent.agentAuthState),\n        group: `${storeId}`,\n      }\n      return (\n        <TableRow\n          key={`a_${ctryId}_${regionId}_${storeId}_${agent.id}`}\n          hover\n          onClick={nodeClickCallback(info)}\n          materialUiTableRowClass={{\n            root: colorClass\n          }}\n          >\n          <TableCell></TableCell>\n          <TableCell></TableCell>\n          <TableCell></TableCell>\n          <TableCell>{agent.agentMOId}</TableCell>\n          <TableCell>{agent.agentType}</TableCell>\n          <TableCell>{agent.agentVersion}</TableCell>\n          <TableCell>{agent.ipAddress}</TableCell>\n        </TableRow>\n      )\n    });\n  }\n\n  function _renderStoreRow(ctryId:number, regionId:number, stores:Array<StoreDataModal>) {\n    return stores.map((store) => {\n      return (\n        <React.Fragment key={`s_${ctryId}_${regionId}_${store.id}`}>\n          <TableRow>\n            <TableCell></TableCell>\n            <TableCell></TableCell>\n            <TableCell>{getStoreName(store.agents)}</TableCell>\n            <TableCell></TableCell>\n            <TableCell></TableCell>\n            <TableCell></TableCell>\n            <TableCell></TableCell>\n          </TableRow>\n          {_renderAgentRow(ctryId, regionId, store.id, store.agents)}\n        </React.Fragment>\n      )\n    });\n  }\n\n  function _renderRegionRow(ctryId:number, regions:Array<RegionDataModal>) {\n    return regions.map((region) => {\n      return (\n        <React.Fragment key={`r_${ctryId}_${region.id}`}>\n          <TableRow>\n            <TableCell></TableCell>\n            <TableCell>{region.name}</TableCell>\n            <TableCell></TableCell>\n            <TableCell></TableCell>\n            <TableCell></TableCell>\n            <TableCell></TableCell>\n            <TableCell></TableCell>\n          </TableRow>\n          {_renderStoreRow(ctryId, region.id, region.stores)}\n        </React.Fragment>\n      )\n    });\n  }\n\n  function _renderCountryRow(countries:Array<CountryDataModal>) {\n    return countries.map((country, idx:number) => {\n      return (\n        <React.Fragment key={`c_${country.id}`}>\n          <TableRow>\n            <TableCell>{country.name}</TableCell>\n            <TableCell></TableCell>\n            <TableCell></TableCell>\n            <TableCell></TableCell>\n            <TableCell></TableCell>\n            <TableCell></TableCell>\n            <TableCell></TableCell>\n          </TableRow>\n          {_renderRegionRow(country.id, country.regions)}\n        </React.Fragment>\n      )\n    });\n  }\n\n  function _renderData() {\n    return _renderCountryRow(networkData.countries);\n  }\n\n  return (\n    <div className={classes.root}>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell>Country</TableCell>\n            <TableCell>Zone</TableCell>\n            <TableCell>Store</TableCell>\n            <TableCell>Agent Id</TableCell>\n            <TableCell>Agent Type</TableCell>\n            <TableCell>Agent Version</TableCell>\n            <TableCell>Ip Address</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {_renderData()}\n        </TableBody>\n      </Table>\n    </div>\n  );\n}\n\nexport default withStyles(styles)(SystemInTableView);\n","import * as React from 'react';\nimport MaskedInput from 'react-text-mask';\nimport TextField from '@material-ui/core/TextField';\n\nconst TextMaskIpV4Address: React.SFC<any> = ({ inputRef, ...other }) => {\n  return (\n    <MaskedInput\n      {...other}\n      ref={inputRef}\n      mask={[/\\d/, /\\d/, /\\d/, \".\", /\\d/, /\\d/, /\\d/, \".\",/\\d/, /\\d/, /\\d/, \".\", /\\d/, /\\d/, /\\d/]}\n      placeholderChar={' '}\n      keepCharPositions={true}\n      showMask\n    />\n  );\n}\n\nexport interface Ipv4TextFieldProps {\n  [key:string]: any;\n}\n\nconst Ipv4TextField: React.SFC<Ipv4TextFieldProps> = ({...etc}) => {\n  return (\n    <TextField\n      {...etc}\n      InputProps={{\n        inputComponent: TextMaskIpV4Address,\n      }}\n    />\n  );\n}\n\nexport default Ipv4TextField;\n","export const IP_VALIDATION_REGEX = /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/;\n\nexport function isIPAddressValid(ipAddress:string):boolean {\n  return !IP_VALIDATION_REGEX.test(ipAddress.replace(/\\s/g, ''));\n}\n","`use strict`\n\nimport * as React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport TextField from '@material-ui/core/TextField';\nimport Ipv4TextField from '../../Ipv4TextField';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControl from '@material-ui/core/FormControl';\nimport Drawer from '@material-ui/core/Drawer';\nimport Divider from '@material-ui/core/Divider';\nimport Chip from '@material-ui/core/Chip';\nimport { withStyles, createStyles, WithStyles, Theme } from '@material-ui/core/styles';\nimport { withFormik, FormikProps, FormikErrors, FormikBag } from 'formik';\n\nimport green from '@material-ui/core/colors/green';\n\nimport {isIPAddressValid} from '../../../const/validatorRegex';\nimport ButtonPopupMenu from \"../../ButtonPopupMenu\";\n\nconst height = 32;\nconst styles = (theme:Theme) => createStyles({\n  root: {\n    height: height\n  },\n  chip: {\n    height: height,\n    width: height\n  },\n  inset: {\n    padding: \"10px\",\n  },\n  statusOk: {\n    backgroundColor: green[600]\n  }\n})\n\nexport interface SystemNetworkInfoInputModal {\n  ipAddress: string;\n  hostname: string;\n}\n\ninterface SystemNetworkInfoProps extends WithStyles<typeof styles> {\n  ipAddress: string;\n  hostname: string;\n  openSideBar: boolean;\n  handleClose: () => void;\n  handleMoreInfoOnClick: () => void;\n}\n\ninterface SystemNetworkInfoProps_Formik extends SystemNetworkInfoProps, FormikProps<SystemNetworkInfoInputModal> {\n}\n\nconst SystemNetworkInfoForm: React.SFC<SystemNetworkInfoProps_Formik> =\n    ({openSideBar, handleClose, handleMoreInfoOnClick, isSubmitting, handleSubmit, errors, values, handleChange, classes}) => {\n  return (\n    <Drawer anchor=\"right\" open={openSideBar} onClose={handleClose}>\n      <form onSubmit={handleSubmit} className={classes.inset}>\n        <FormControl component=\"div\">\n          <FormGroup>\n            <FormLabel>Connection Information</FormLabel>\n            <Chip label=\"OK\" className={`${classes.chip} ${classes.statusOk}`}/>\n          </FormGroup>\n          <Divider inset/>\n          <FormGroup>\n            <Button variant=\"contained\" color=\"primary\" disabled={isSubmitting} onClick={handleMoreInfoOnClick}>\n              More Info\n            </Button>\n\n            <ButtonPopupMenu\n              id = \"actions\"\n              btnLabel = \"Actions...\"\n              options = {\n                [\n                  { label: \"Shutdown\", handleClick: () => {} },\n                  { label: \"Restart\", handleClick: () => {} },\n                  { label: \"Suspend\", handleClick: () => {} },\n                  { label: \"Wakeup on Lan\", handleClick: () => {} }\n                ]\n              }\n            />\n            <Divider/>\n            <Ipv4TextField\n              required\n              id=\"ip-address\"\n              name=\"ipAddress\"\n              label=\"Ip Address\"\n              margin=\"normal\"\n              helperText=\"Range (254.254.254.254)\"\n              onChange={handleChange}\n              value={values.ipAddress}\n              error={(errors.ipAddress && errors.ipAddress !== '')}\n            />\n            <TextField\n              required\n              id=\"host-name\"\n              name=\"hostname\"\n              label=\"Host Name\"\n              margin=\"normal\"\n              onChange={handleChange}\n              value={values.hostname}\n              error={(errors.hostname && errors.hostname !== '')}\n            />\n            <Button variant=\"contained\" color=\"primary\" type=\"submit\" disabled={isSubmitting}>\n              Update\n            </Button>\n            <Button variant=\"contained\" color=\"secondary\" type=\"submit\" disabled={isSubmitting}>\n              Remove\n            </Button>\n          </FormGroup>\n        </FormControl>\n      </form>\n    </Drawer>\n  );\n}\n\nconst SystemNetworkInfo = withFormik<SystemNetworkInfoProps, SystemNetworkInfoInputModal>({\n  mapPropsToValues: props => {\n    return {\n      ipAddress: \"  1.204.204.402\",\n      hostname: (props as any).hostname\n    };\n  },\n  validate: (values: SystemNetworkInfoInputModal) => {\n    let errors: FormikErrors<SystemNetworkInfoInputModal> = {};\n\n    if (!values.ipAddress) {\n      errors.ipAddress = 'Required';\n    }\n    else if(isIPAddressValid(values.ipAddress)) {\n      errors.ipAddress = 'Invalid IP, try (254.254.254.254)';\n    }\n\n    if (!values.hostname) {\n      errors.hostname = 'Required';\n    }\n    return errors;\n  },\n\n  handleSubmit: (values: SystemNetworkInfoInputModal, formikBag: FormikBag<SystemNetworkInfoInputModal,SystemNetworkInfoInputModal>) => {\n\n  },\n})(SystemNetworkInfoForm);\n\nexport default withStyles(styles)(SystemNetworkInfo);\n","`use strict`\n\nimport * as React from 'react';\nimport produce from \"immer\";\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport TextField from '@material-ui/core/TextField';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { withFormik, FormikProps, FormikErrors, FormikBag } from 'formik';\nimport {isIPAddressValid} from '../../../const/validatorRegex';\nimport Ipv4TextField from '../../Ipv4TextField';\n\nexport interface SystemNetworkControlInputModal {\n  ipAddress: string;\n  hostname: string;\n  checkHostIp: boolean;\n  eventFilter: number;\n}\n\ninterface SystemNetworkControlInputProps {\n  onSubmit: (output: SystemNetworkControlInputModal) => void;\n  handleClose: () => void;\n  openDialog: boolean;\n}\n\ninterface SystemNetworkControlInputProps_Formik extends SystemNetworkControlInputProps, FormikProps<SystemNetworkControlInputModal> {\n}\n\ninterface SystemNetworkControlInputState {\n  isOpen: boolean;\n}\n\nclass SystemNetworkControlForm extends React.PureComponent<SystemNetworkControlInputProps_Formik, SystemNetworkControlInputState> {\n  constructor(props:SystemNetworkControlInputProps_Formik) {\n    super(props);\n    this.state = {\n      isOpen: false\n    };\n  }\n\n  _toggleOpen = () => {\n    this.setState(\n      produce<SystemNetworkControlInputState>(draft => {\n        draft.isOpen = !draft.isOpen;\n      })\n    );\n  }\n\n  render() {\n    const {openDialog, handleClose, isSubmitting, handleSubmit, errors, values, handleChange, onSubmit} = this.props;\n    const {isOpen} = this.state;\n\n    return (\n      <Dialog\n        open={openDialog}\n        onClose={handleClose}\n        aria-labelledby=\"system-dialog-title\"\n      >\n        <form onSubmit={handleSubmit}>\n          <DialogTitle id=\"system-dialog-title\">\n            Add a new store?\n          </DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              Enter the store connection information for monitoring and management.\n            </DialogContentText>\n            <Grid container spacing={0}>\n              {\n                !values.checkHostIp &&\n                (<Grid item xs={12}>\n                  <Ipv4TextField\n                    required\n                    id=\"ip-address\"\n                    name=\"ipAddress\"\n                    label=\"Ip Address\"\n                    margin=\"normal\"\n                    helperText=\"Range (254.254.254.254)\"\n                    onChange={handleChange}\n                    value={values.ipAddress}\n                    error={(errors.ipAddress && errors.ipAddress !== '')}\n                  />\n                </Grid>)\n              }\n              {\n                values.checkHostIp &&\n                (<Grid item xs={12}>\n                  <TextField\n                    required\n                    id=\"host-name\"\n                    name=\"hostname\"\n                    label=\"Hostname\"\n                    margin=\"normal\"\n                    onChange={handleChange}\n                    helperText=\"Check non ip setting\"\n                    value={values.hostname}\n                    error={(errors.hostname && errors.hostname !== '')}\n                  />\n                </Grid>)\n              }\n              <Grid item xs={12}>\n                <FormControlLabel\n                  id=\"check-host-ip\"\n                  name=\"checkHostIp\"\n                  control={\n                    <Checkbox checked={values.checkHostIp} onChange={handleChange} />\n                  }\n                  label=\"Use hostname\"\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <FormLabel>Event Filter: </FormLabel>\n                <Select\n                  id=\"select-event-filter\"\n                  name=\"eventFilter\"\n                  open={isOpen}\n                  onClose={this._toggleOpen}\n                  onOpen={this._toggleOpen}\n                  value={\"15\"}\n                  onChange={handleChange}\n                >\n                  <MenuItem value={\"3\"}>FATAL</MenuItem>\n                  <MenuItem value={\"15\"}>FATAL, CRITICAL</MenuItem>\n                  <MenuItem value={\"31\"}>FATAL,CRITICAL,MINOR</MenuItem>\n                  <MenuItem value={\"127\"}>FATAL,CRITICAL,MINOR,WARNING</MenuItem>\n                  <MenuItem value={\"1023\"}>FATAL,CRITICAL,MINOR, WARNING, HARMLESS</MenuItem>\n                  <MenuItem value={\"2047\"}>ALL</MenuItem>\n                </Select>\n              </Grid>\n            </Grid>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={handleClose} color=\"secondary\">\n              Close\n            </Button>\n            <Button color=\"primary\" type=\"submit\" disabled={isSubmitting}>\n              Add\n            </Button>\n          </DialogActions>\n        </form>\n      </Dialog>\n    );\n  }\n}\n\nconst SystemNetworkControlInput = withFormik<SystemNetworkControlInputProps, SystemNetworkControlInputModal>({\n  mapPropsToValues: props => {\n    return {\n      ipAddress: '',\n      hostname: '',\n      checkHostIp: true,\n      eventFilter: 15\n    };\n  },\n  validate: (values: SystemNetworkControlInputModal) => {\n    let errors: FormikErrors<SystemNetworkControlInputModal> = {};\n    const ipAddressRegexValidator = /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/;\n\n    if(!values.checkHostIp) {\n      if (!values.ipAddress) {\n        errors.ipAddress = \"Required\";\n      }\n      else if(isIPAddressValid(values.ipAddress)) {\n        errors.ipAddress = \"Invalid IP, try (254.254.254.254)\";\n      }\n    }\n\n    if(values.checkHostIp) {\n      if (!values.hostname) {\n        errors.hostname = \"Required\";\n      }\n    }\n\n    return errors;\n  },\n\n  handleSubmit: (values: SystemNetworkControlInputModal, formikBag: FormikBag<SystemNetworkControlInputProps,SystemNetworkControlInputModal>) => {\n    formikBag.props.onSubmit({\n      ipAddress: values.ipAddress?values.ipAddress:\"0.0.0.0\",\n      hostname: values.hostname?values.hostname:\"Empty\",\n      checkHostIp: values.checkHostIp,\n      eventFilter: values.eventFilter\n    });\n    formikBag.resetForm();\n    formikBag.props.handleClose();\n  },\n})(SystemNetworkControlForm);\n\nexport default SystemNetworkControlInput;\n","`use strict`\n\nimport * as React from 'react';\nimport produce from \"immer\";\nimport AddIcon from '@material-ui/icons/Add';\nimport TableChartIcon from '@material-ui/icons/TableChart';\nimport ScatterPlotIcon from '@material-ui/icons/ScatterPlot';\nimport Button from '@material-ui/core/Button';\nimport { withStyles, createStyles, WithStyles, Theme } from '@material-ui/core/styles';\nimport {AutoSizer} from 'react-virtualized';\nimport SystemInTableView from './SystemInTableView';\nimport SystemNetwork from '../../SystemNetwork';\nimport {NodeInfoModal, NodeType, StatusType, NodeDataModal} from '../../SystemNetwork';\nimport SystemNetworkInfo from './SystemNetworkInfo';\nimport {SystemNetworkInfoInputModal} from './SystemNetworkInfo';\nimport SystemNetworkControlInput from './SystemNetworkControlInput';\n//import {sampleLinkedNodes, sampleNodes} from '../../../samples/network';\nimport {convertNetworkDataIntoSystemNetwork} from \"./networkLinkConverter\";\nimport {NetworkDataModal} from \"./modal\";\n\nconst buttonPosition= 20;\nconst styles = (theme:Theme) => createStyles({\n  root: {\n    width: \"100%\",\n    height: \"calc(100vh - 64px)\"\n  },\n  addButton: {\n    right: buttonPosition + \"px\",\n    bottom: buttonPosition + \"px\",\n    position: 'fixed'\n  },\n  viewButton: {\n    right: (buttonPosition * 4) + \"px\",\n    bottom: buttonPosition + \"px\",\n    position: 'fixed'\n  }\n});\n\nexport interface SystemNetworkControlModal {\n  storeName: string;\n  ipAddress: string;\n  hostname: string;\n  checkHostIp: boolean;\n  eventFilter: number;\n}\n\ninterface SystemNetworkControlProps extends WithStyles<typeof styles> {\n  handleMoreInfoOnClick: () => void;\n  networkData: NetworkDataModal;\n}\n\ninterface SystemNetworkControlState {\n  isTableView: boolean;\n  counter: number;\n  isInputDialogOpen: boolean;\n  isInfoOpen: boolean;\n  infoDetail: SystemNetworkInfoInputModal;\n}\n\nclass SystemNetworkControl extends React.PureComponent<SystemNetworkControlProps, SystemNetworkControlState> {\n  private systemNetworkRef = React.createRef<SystemNetwork>();\n  private counter = 0;\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      isTableView: false,\n      counter: 0,\n      isInputDialogOpen: false,\n      isInfoOpen: false,\n      infoDetail: {\n        ipAddress: '',\n        hostname: ''\n      }\n    }\n  }\n\n  _handleInputDialogClose = () => {\n    this.setState(\n      produce<SystemNetworkControlState>(draft => {\n        draft.isInputDialogOpen = false;\n      })\n    );\n  }\n\n  _onSubmitAddNetwork = (output:SystemNetworkControlModal) => {\n    const storeName = \"Store 01\";\n    if(this.systemNetworkRef.current === null || !this.systemNetworkRef.current) {\n      return;\n    }\n\n    const component = this.systemNetworkRef.current.addNodes([\n      {\n        name: storeName,\n        ipAddress: output.ipAddress,\n        hostname: output.hostname,\n        connectionStatus: StatusType.CONNECTED_AUTHENTICATED,\n        nodeType: NodeType.MASTER,\n        group: output.storeName\n      },\n      {\n        name: `Child ${storeName}`,\n        ipAddress: output.ipAddress,\n        hostname: output.hostname,\n        connectionStatus: StatusType.CONNECTED_AUTHENTICATED,\n        nodeType: NodeType.GENERAL,\n        group: output.storeName\n      },\n      {\n        name: `Child ${storeName}`,\n        ipAddress: output.ipAddress,\n        hostname: output.hostname,\n        connectionStatus: StatusType.CONNECTED_AUTHENTICATED,\n        nodeType: NodeType.GENERAL,\n        group: output.storeName\n      }\n    ]);\n  }\n\n  _onClickAddNetwork = () => {\n    this.setState(\n      produce<SystemNetworkControlState>(draft => {\n        draft.isInputDialogOpen = true;\n      })\n    );\n  }\n\n  _onClickViewNetwork = () => {\n    this.setState(\n      produce<SystemNetworkControlState>(draft => {\n        draft.isTableView = !draft.isTableView;\n      })\n    );\n  }\n\n  _onClickNode = (data: NodeInfoModal) => () => {\n    this.setState(\n      produce<SystemNetworkControlState>(draft => {\n        draft.isInfoOpen = true;\n        draft.infoDetail = {\n          ipAddress: data.ipAddress,\n          hostname: data.hostname\n        }\n      })\n    );\n  }\n\n  _handleInfoClose = () => {\n    this.setState(\n      produce<SystemNetworkControlState>(draft => {\n        draft.isInfoOpen = false;\n      })\n    );\n  }\n\n  _renderTableView = () => {\n    const {classes, networkData} = this.props;\n\n    return (\n      <React.Fragment>\n        <SystemInTableView\n          networkData={networkData}\n          nodeClickCallback={this._onClickNode}/>\n        <Button\n          variant=\"fab\"\n          color=\"primary\"\n          aria-label=\"View\"\n          className={classes.viewButton}\n          onClick={this._onClickViewNetwork}\n          >\n          <ScatterPlotIcon/>\n        </Button>\n      </React.Fragment>\n    )\n  }\n\n  _renderGraphView = () => {\n    const {classes, networkData} = this.props;\n    const data = convertNetworkDataIntoSystemNetwork(networkData);\n\n    return (\n      <React.Fragment>\n        <AutoSizer>\n        {(({width, height}) => width === 0 || height === 0 ? null : (\n          <SystemNetwork\n            width={(width-5)} height={(height-5)}\n            language={\"EN\"}\n            initData={data}\n            ref={this.systemNetworkRef}\n            nodeClickCallback={this._onClickNode}\n            />\n          ))}\n        </AutoSizer>\n\n        <Button\n          variant=\"fab\"\n          color=\"primary\"\n          aria-label=\"View\"\n          className={classes.viewButton}\n          onClick={this._onClickViewNetwork}\n          >\n          <TableChartIcon/>\n        </Button>\n      </React.Fragment>\n    )\n  }\n\n  _renderDisplay = () => {\n    const {classes} = this.props;\n    const {isTableView} = this.state;\n\n    if(isTableView) {\n      return this._renderTableView();\n    }\n    else {\n      return this._renderGraphView();\n    }\n  }\n\n  render() {\n    const {classes, handleMoreInfoOnClick} = this.props;\n    const {isInputDialogOpen, isInfoOpen, infoDetail, isTableView} = this.state;\n\n    return (\n      <div className={classes.root}>\n        { this._renderDisplay() }\n        <Button\n          variant=\"fab\"\n          color=\"secondary\"\n          aria-label=\"Add\"\n          className={classes.addButton}\n          onClick={this._onClickAddNetwork}\n          >\n          <AddIcon/>\n        </Button>\n        <SystemNetworkControlInput\n          openDialog={isInputDialogOpen}\n          onSubmit={this._onSubmitAddNetwork}\n          handleClose={this._handleInputDialogClose}\n          />\n        <SystemNetworkInfo\n          openSideBar={isInfoOpen}\n          handleClose={this._handleInfoClose}\n          handleMoreInfoOnClick={handleMoreInfoOnClick}\n          {...infoDetail}\n          />\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(SystemNetworkControl);\n","import * as React from 'react';\nimport Typography from '@material-ui/core/Typography';\n\nexport interface LoaderErrorProps {\n}\n\nconst LoaderError: React.SFC<LoaderErrorProps> = ({children}) => {\n return <Typography>{children}</Typography>;\n}\n\nexport default LoaderError;\n","import * as React from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst Loader: React.SFC<any> = () => {\n return <CircularProgress/>;\n}\n\nexport default Loader;\n","import * as React from 'react';\nimport {compose, Dispatch} from \"redux\";\nimport {connect, MapStateToProps} from \"react-redux\";\nimport LoaderError from '../components/LoaderError';\nimport Loader from '../components/Loader';\nimport {FetchMiddlewareModal} from \"../middleware/fetch\";\n\nexport interface BasicLoaderModal<T> {\n  isEmpty: (response: T) => boolean;\n  isError: (response: T) => boolean;\n  isLoading: (response: T) => boolean;\n  emptyMessage: string;\n  errorMessage: (response: T) => string;\n  [key:string]: any;\n}\n\nexport interface WithLoadConnectionProps extends BasicLoaderModal<any> {\n  loading: boolean;\n  dispatch: any;\n}\n\nconst withLoadConnection = (dispatchFunc: ()=>FetchMiddlewareModal) => (Component: React.ComponentType) =>\n  class LoaderHOC extends React.Component<WithLoadConnectionProps, {}> {\n    componentDidMount(){\n      this.props.dispatch(dispatchFunc());\n    }\n\n    render() {\n      const {dispatch, isEmpty, isError, isLoading, errorMessage, emptyMessage, ...response} = this.props;\n      if(isLoading(response)) {\n        return <Loader/>;\n      }\n      if(isError(response)) {\n        return <LoaderError>{errorMessage(response)}</LoaderError>;\n      }\n      if(isEmpty(response)) {\n        return <LoaderError>{emptyMessage}</LoaderError>;\n      }\n      return <Component {...response}/>;\n    }\n  }\n\nconst composedHoc = (fetchFunc:()=>FetchMiddlewareModal, mapStateToProps:((state:MapStateToProps<any, any, any>) => BasicLoaderModal<any>)) => {\n  return compose(\n    connect(mapStateToProps),\n    withLoadConnection(fetchFunc)\n  )\n};\n\nexport default composedHoc;\n","`use strict`\n\nimport * as React from 'react';\nimport { compose } from \"redux\";\nimport { MapStateToProps } from \"react-redux\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\nimport SystemNetworkControl from \"../SystemNetworkControl\";\nimport withLoadConnection from \"../../../hoc/withLoadConnection\";\nimport {BasicLoaderModal} from \"../../../hoc/withLoadConnection\";\nimport { fetchStores, fetchFullStores, StoreFetchModal } from \"../../../ducks/StoreFetch\";\n\ninterface ResponseModal {\n  store: StoreFetchModal\n}\n\ninterface THomeProps extends RouteComponentProps<any>, BasicLoaderModal<ResponseModal> {}\n\nconst THome: React.SFC<THomeProps> = ({history, store, error}) => {\n  const {items} = store;\n  return <\n    SystemNetworkControl\n    handleMoreInfoOnClick={()=>{history.push(\"/serverinfo\")}}\n    networkData={items.data}\n    />\n}\n\nconst mapStateToProps = (state:any) => ({\n  isLoading: (response: ResponseModal) => response.store.isLoading,\n  isEmpty: (response: ResponseModal) => false,\n  isError: (response: ResponseModal) => (response.store.error !== null),\n  errorMessage: (response: ResponseModal) => `${response.store.error}`,\n  emptyMessage: \"RECORD NOT FOUND\",\n  store: state.store\n});\n\nconst composeComponent = compose (\n  withLoadConnection(fetchFullStores, mapStateToProps),\n  withRouter\n)\n\nexport default composeComponent(THome);\n","import * as React from \"react\";\nimport THome from \"../../container/THome\";\n\nconst Home: React.SFC<any> = () => {\n  return (\n    <THome/>\n  );\n};\n\nexport default Home;\n"],"sourceRoot":""}