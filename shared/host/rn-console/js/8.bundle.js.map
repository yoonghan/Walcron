{"version":3,"sources":["webpack:///./src/components/SortableTable/shared.ts","webpack:///./src/components/SortableTable/SortedTableHeader.tsx","webpack:///./src/components/SortableTable/sortAlgorithm.ts","webpack:///./src/components/SortableTable/index.tsx","webpack:///./src/components/TableRow.tsx","webpack:///./src/components/TitleBar.tsx","webpack:///./src/components/ButtonPopupMenu.tsx","webpack:///./src/components/SearchTextField.tsx","webpack:///./src/components/container/TNotificationAlert/Detail.tsx","webpack:///./src/components/container/TNotificationAlert/index.tsx","webpack:///./src/components/routable/Notification/Alert/index.tsx"],"names":["EnumSelectType","theme","root","chkStyle","paddingBottom","rows","onRequestSort","selectType","numSelected","rowCount","onSelectAllClick","order","orderBy","classes","createSortHandler","headerId","event","directionSort","TableRow","CHECKBOX","padding","indeterminate","checked","onChange","className","variant","align","RADIO","renderSelectionRow","map","row","key","uniqueDataKey","numeric","sortDirection","active","direction","onClick","label","desc","a","b","array","stabilizedThis","el","idx","data","index","cmp","getSorting","sort","AVAILABLE_PAGE_ROW_SELECTION","SelectableTableType","overflow","clickableRow","cursor","clickableCell","color","palette","primary","main","props","super","handleRequestSort","this","state","setState","draft","handleChangePage","page","handleChangeRowsPerPage","value","Number","target","rowsPerPage","_sliceData","withPagination","slice","_renderPagination","rowsPerPageOptions","component","count","length","backIconButtonProps","nextIconButtonProps","onChangePage","onChangeRowsPerPage","_updateCheckBoxValue","checkBoxSelections","callbackForSelectedCheckboxValues","selectedCheckbox","_handleSelectAllClick","dm","id","_handleRadioChange","callbackForSelectedRadioValues","selectedRadio","_handleCheckChange","selectedIndex","indexOf","newSelected","concat","_handleRowClick","withSelection","callbackForClickableRow","idAsString","singleSelectedRow","_renderSelectBox","isSelected","name","aria-label","_decorateCell","r","hover","c","body","_selectedRow","defaultRowsPerPage","header","aria-labelledby","selected","tabIndex","materialUiTableRowClass","hm","nopadding","height","children","consumerData","isCompact","tableRowDisplay","enhance","position","width","spacing","unit","closeBtn","textAlign","left","top","divider","marginTop","title","canClose","history","goBack","_handleClick","currentTarget","anchorEl","_handleClose","optionClickEvent","btnLabel","options","open","Boolean","onClose","PaperProps","style","maxHeight","marginLeft","option","handleClick","callbackForSearchTextChanged","handleSearchClick","displaySearchText","text","InputProps","startAdornment","endAdornment","mixins","gutters","TNotificationAlertForm","setShowDisplayError","callbackForRowClick","container","TitleBar","item","xs","paper","buttonContainer","ButtonPopupMenu","alert","fontSize","SearchTextField","SortableTable","severity","system","category","timeReceived","details","paddingTop","display","alignItems","marginRight","_displayError","toShow","dialogOpen","_detailClick","showDetail","aria-describedby"],"mappings":"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","file":"8.bundle.js","sourcesContent":["export enum EnumSelectType {\n  NONE,\n  CHECKBOX,\n  RADIO\n}\n","`use strict`\n\nimport * as React from 'react';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '../TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Typography from '@material-ui/core/Typography';\nimport {HeaderModal} from './modal';\nimport {SortDirection} from '@material-ui/core/TableCell';\nimport {EnumSelectType} from './shared';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { withStyles, createStyles, WithStyles, Theme } from '@material-ui/core/styles';\n\nconst styles = (theme:Theme) => createStyles({\n  root: {\n  },\n  chkStyle: {\n    paddingBottom: 0\n  }\n});\n\nexport interface SortedTableHeaderProps extends WithStyles<typeof styles> {\n  rows: Array<HeaderModal>;\n  onRequestSort: (event:React.FormEvent<HTMLElement>, headerId:string) => void;\n  order: SortDirection;\n  orderBy: string;\n  selectType: EnumSelectType;\n  onSelectAllClick: (event:React.ChangeEvent<HTMLInputElement>) => void;\n  rowCount: number;\n  numSelected: number;\n}\n\nconst SortedTableHeader: React.SFC<SortedTableHeaderProps> =\n      ({rows, onRequestSort, selectType, numSelected, rowCount, onSelectAllClick, order, orderBy, classes}) => {\n\n  function createSortHandler(headerId:string) {\n    return function(event:React.FormEvent<HTMLElement>) {\n      onRequestSort(event, headerId);\n    }\n  }\n\n  function renderSelectionRow() {\n    switch(selectType) {\n      case EnumSelectType.CHECKBOX:\n        return (\n          <TableCell padding=\"none\">\n            <Checkbox\n              indeterminate={numSelected > 0 && numSelected < rowCount}\n              checked={numSelected === rowCount}\n              onChange={onSelectAllClick}\n              className={classes.chkStyle}\n            />\n            <Typography variant=\"caption\" align=\"center\">\n              ({numSelected})\n            </Typography>\n          </TableCell>\n        )\n      case EnumSelectType.RADIO:\n        return <TableCell padding=\"none\"/>;\n      default:\n      break;\n    }\n  }\n\n  const directionSort:(\"asc\"|\"desc\") = order ? order: \"desc\";\n\n  return (\n    <TableHead>\n      <TableRow>\n        {renderSelectionRow()}\n        {rows.map(row => {\n          return (\n            <TableCell\n              key={row.uniqueDataKey}\n              numeric={row.numeric}\n              sortDirection={orderBy === row.uniqueDataKey ? order:false}\n            >\n              <TableSortLabel\n                active={orderBy === row.uniqueDataKey}\n                direction={directionSort}\n                onClick={createSortHandler(row.uniqueDataKey)}\n              >\n                {row.label}\n              </TableSortLabel>\n            </TableCell>\n          );\n        }, this)}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nexport default withStyles(styles)(SortedTableHeader);\n","`use strict`\n\nimport {DataModal} from './modal';\nimport {SortDirection} from '@material-ui/core/TableCell';\n\ninterface TempSortedModal {\n  data: DataModal,\n  index: number\n}\n\nfunction desc(a:DataModal, b:DataModal, orderBy:string) {\n  if (b[orderBy] < a[orderBy]) {\n    return 1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return -1;\n  }\n  return 0;\n}\n\nfunction getSorting(order:SortDirection, orderBy:string) {\n  return order === \"desc\" ? (a:DataModal, b:DataModal) => desc(a, b, orderBy) : (a:DataModal, b:DataModal) => -desc(a, b, orderBy);\n}\n\nfunction stableSort(array:Array<DataModal>, order:SortDirection, orderBy:string) {\n  const stabilizedThis:Array<TempSortedModal> =\n        array.map((el:DataModal, idx:number) => ({data:el, index:idx}));\n  const cmp = getSorting(order, orderBy);\n  stabilizedThis.sort((a:TempSortedModal, b:TempSortedModal) => {\n    const order = cmp(a.data, b.data);\n    if (order !== 0) return order;\n    return a.index - b.index;\n  });\n  return stabilizedThis.map((el:TempSortedModal) => el.data);\n}\n\nexport default stableSort;\n","`use strict`\n\nimport * as React from 'react';\nimport produce from \"immer\";\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '../TableRow';\nimport {SortDirection} from '@material-ui/core/TableCell';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Radio from '@material-ui/core/Radio';\nimport SortedTableHeader from './SortedTableHeader';\nimport {DataModal, HeaderModal} from './modal';\nimport defaultSort from './sortAlgorithm';\nimport {EnumSelectType} from './shared';\nimport { withStyles, createStyles, WithStyles, Theme } from '@material-ui/core/styles';\n\ntype SelectableRowsPerPage = 5|10|20|50;\nconst AVAILABLE_PAGE_ROW_SELECTION = [5, 10, 20, 50];\nexport const SelectableTableType = EnumSelectType;\n\nconst styles = (theme:Theme) => createStyles({\n  root: {\n    overflow: \"auto\"\n  },\n  clickableRow: {\n    cursor: \"pointer\"\n  },\n  clickableCell: {\n    color: theme.palette.primary.main\n  }\n});\n\ninterface TableWithSortProp extends WithStyles<typeof styles> {\n  data: Array<DataModal>;\n  header: Array<HeaderModal>;\n  defaultRowsPerPage?: SelectableRowsPerPage;\n  withPagination: boolean;\n  withSelection?: EnumSelectType;\n  name?: string;\n  callbackForSelectedCheckboxValues?:(values:Array<string>)=>{}\n  callbackForSelectedRadioValues?:(id:string)=>{}\n  callbackForClickableRow?:(id:string)=>void\n}\n\ninterface TableWithSortState {\n  order: SortDirection;\n  orderBy: string;\n  page: number;\n  rowsPerPage: number;\n  selectedRadio: string;\n  selectedCheckbox: Array<string>;\n  singleSelectedRow: string;\n}\n\nclass TableWithSort extends React.PureComponent<TableWithSortProp, TableWithSortState> {\n  constructor(props:TableWithSortProp) {\n    super(props);\n    this.state = {\n      order: false,\n      orderBy: \"\",\n      page: 0,\n      rowsPerPage: this.props.defaultRowsPerPage || 5,\n      selectedRadio: \"\",\n      selectedCheckbox: [],\n      singleSelectedRow: \"\"\n    }\n  }\n\n  handleRequestSort = (event:React.FormEvent<HTMLElement>, headerId:string) => {\n    const orderBy = headerId;\n    let order:SortDirection = \"desc\";\n\n    if (this.state.orderBy === headerId && this.state.order === 'desc') {\n      order = \"asc\";\n    }\n\n    this.setState(\n      produce<TableWithSortState>(draft => {\n        draft.order = order;\n        draft.orderBy = orderBy;\n      })\n    );\n  };\n\n  handleChangePage = (event:React.FormEvent<HTMLElement>, page:number) => {\n    this.setState(\n      produce<TableWithSortState>(draft => {\n        draft.page = page;\n      })\n    );\n  };\n\n  handleChangeRowsPerPage = (event:React.ChangeEvent<HTMLInputElement>) => {\n    const value = Number(event.target.value);\n    this.setState(\n      produce<TableWithSortState>(draft => {\n        draft.rowsPerPage = value;\n      })\n    );\n  };\n\n  _sliceData = (data: Array<DataModal>):Array<DataModal> => {\n    const {withPagination} = this.props;\n    const {rowsPerPage, page} = this.state;\n    if(withPagination) {\n      return data.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage);\n    }\n    else {\n      return data;\n    }\n  }\n\n  _renderPagination = () => {\n    const {data, withPagination} = this.props;\n    const {rowsPerPage, page} = this.state;\n\n    if(withPagination) {\n      return (<TablePagination\n        rowsPerPageOptions={AVAILABLE_PAGE_ROW_SELECTION}\n        component=\"div\"\n        count={data.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        backIconButtonProps={{\n          'aria-label': 'Previous Page',\n        }}\n        nextIconButtonProps={{\n          'aria-label': 'Next Page',\n        }}\n        onChangePage={this.handleChangePage}\n        onChangeRowsPerPage={this.handleChangeRowsPerPage}\n      />);\n    }\n    return null;\n  }\n\n  _updateCheckBoxValue = (checkBoxSelections:Array<string>) => {\n    const {callbackForSelectedCheckboxValues} = this.props;\n    this.setState(\n      produce<TableWithSortState>(draft => {\n        draft.selectedCheckbox = checkBoxSelections;\n        if(callbackForSelectedCheckboxValues) {\n          callbackForSelectedCheckboxValues(draft.selectedCheckbox);\n        }\n      })\n    );\n  }\n\n  _handleSelectAllClick = (event:React.ChangeEvent<HTMLInputElement>) => {\n    const checked = event.target.checked;\n    if (checked) {\n      this._updateCheckBoxValue(this.props.data.map((dm:DataModal) => `${dm.id}`));\n    }\n    else {\n      this._updateCheckBoxValue([]);\n    }\n  };\n\n  _handleRadioChange = (id:string) => {\n    const {callbackForSelectedRadioValues} = this.props;\n    this.setState(\n      produce<TableWithSortState>(draft => {\n        draft.selectedRadio = id;\n        if(callbackForSelectedRadioValues) {\n          callbackForSelectedRadioValues(id);\n        }\n      })\n    );\n  }\n\n  _handleCheckChange = (id:string) => {\n    const { selectedCheckbox } = this.state;\n    const selectedIndex = selectedCheckbox.indexOf(id);\n\n    let newSelected:Array<string> = [];\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selectedCheckbox, id);\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selectedCheckbox.slice(1));\n    } else if (selectedIndex === selectedCheckbox.length - 1) {\n      newSelected = newSelected.concat(selectedCheckbox.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(\n        selectedCheckbox.slice(0, selectedIndex),\n        selectedCheckbox.slice(selectedIndex + 1),\n      );\n    }\n\n    this._updateCheckBoxValue(newSelected);\n  }\n\n  _handleRowClick = (id:string|number) => (event:React.MouseEvent<HTMLTableRowElement>) => {\n    const {withSelection, callbackForClickableRow} = this.props;\n    const idAsString = `${id}`;\n\n    switch(withSelection) {\n      case EnumSelectType.CHECKBOX:\n        this._handleCheckChange(idAsString);\n        break;\n      case EnumSelectType.RADIO:\n        this._handleRadioChange(idAsString)\n        break;\n      default:\n        break;\n    }\n\n    if(callbackForClickableRow) {\n      this.setState(\n        produce<TableWithSortState>(draft => {\n          draft.singleSelectedRow = idAsString;\n          callbackForClickableRow(idAsString);\n        })\n      );\n    }\n  }\n\n  _renderSelectBox = (id:number|string, selectType:EnumSelectType) => {\n    const {selectedRadio, selectedCheckbox} = this.state,\n          idAsString = `${id}`,\n          isSelected = selectedCheckbox.indexOf(idAsString) !== -1;\n\n    switch(selectType) {\n      case EnumSelectType.CHECKBOX:\n        return (\n          <TableCell padding=\"none\">\n            <Checkbox\n              value={idAsString}\n              checked={isSelected}\n              name={name}\n              color=\"primary\"\n              aria-label={idAsString}\n            />\n          </TableCell>\n        );\n        break;\n      case EnumSelectType.RADIO:\n        return (\n          <TableCell padding=\"none\">\n            <Radio\n              checked={selectedRadio === idAsString}\n              value={idAsString}\n              name={name}\n              color=\"primary\"\n              aria-label={idAsString}\n            />\n          </TableCell>\n        );\n        break;\n      default:\n      break;\n    }\n  }\n\n  _decorateCell = () => {\n    const {callbackForClickableRow, classes} = this.props;\n    const rowDecoration = callbackForClickableRow?{hover: classes.clickableRow}:{};\n    const cellDecoration = callbackForClickableRow?{body: classes.clickableCell}:{};\n    return {r:rowDecoration, c:cellDecoration};\n  }\n\n  _selectedRow = (id:number|string) => {\n    const {callbackForClickableRow} = this.props;\n    const {singleSelectedRow} = this.state;\n    if(callbackForClickableRow) {\n      if(singleSelectedRow !== \"\" && singleSelectedRow == id) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  render() {\n    const {data, header, withPagination, withSelection, classes} = this.props;\n    const {selectedCheckbox, order, orderBy, rowsPerPage, page} = this.state;\n\n    return (\n      <div>\n        <div className={classes.root}>\n          <Table aria-labelledby=\"tableTitle\">\n            <SortedTableHeader\n              rows={header}\n              onRequestSort={this.handleRequestSort}\n              order={order}\n              orderBy={orderBy}\n              selectType={withSelection}\n              onSelectAllClick={this._handleSelectAllClick}\n              numSelected={selectedCheckbox.length}\n              rowCount={data.length}\n            />\n            <TableBody>\n              {\n                this._sliceData(defaultSort(data, order, orderBy))\n                .map((dm:DataModal) => {\n                  return (\n                    <TableRow\n                      hover\n                      selected={this._selectedRow(dm.id)}\n                      tabIndex={-1}\n                      key={dm.id}\n                      onClick={this._handleRowClick(dm.id)}\n                      materialUiTableRowClass={this._decorateCell().r}\n                    >\n                      {\n                        this._renderSelectBox(dm.id, withSelection)\n                      }\n                      {\n                        header.map((hm:HeaderModal, idx:number) => {\n                          return (\n                            <TableCell\n                              key={`${hm.uniqueDataKey}_${dm.id}`}\n                              numeric={hm.numeric}\n                              classes={this._decorateCell().c}\n                              >\n                              {dm[hm.uniqueDataKey]}\n                            </TableCell>\n                          )\n                        })\n                      }\n                    </TableRow>\n                  );\n                })}\n            </TableBody>\n          </Table>\n        </div>\n        {this._renderPagination()}\n      </div>\n    )\n  }\n}\n\nexport default withStyles(styles)(TableWithSort);\n","`use strict`\n\nimport * as React from 'react';\nimport { DashboardConsumer } from \"../shared/Context\";\nimport MaterialUITableRow from '@material-ui/core/TableRow';\nimport { withStyles, createStyles, WithStyles, Theme } from '@material-ui/core/styles';\n\nconst styles = (theme:Theme) => createStyles({\n  nopadding: {\n    height: \"unset\"\n  }\n});\n\ninterface TableRowProps extends WithStyles<typeof styles>{\n  selected?: boolean,\n  hover?:boolean,\n  tabIndex?: number,\n  onClick?: any,\n  materialUiTableRowClass?: object\n}\n\nconst TableRow: React.SFC<TableRowProps> = ({classes, children, selected, hover, tabIndex, onClick, materialUiTableRowClass}) => {\n  function tableRowDisplay(isCompact:boolean) {\n    return (\n      <MaterialUITableRow\n        classes={materialUiTableRowClass}\n        className={isCompact?classes.nopadding:\"\"}\n        selected={selected}\n        hover={hover}\n        tabIndex={tabIndex}\n        onClick={onClick}\n        >\n        {children}\n      </MaterialUITableRow>);\n  }\n\n\n  return (\n    <DashboardConsumer>\n    { consumerData => (\n      tableRowDisplay(consumerData.isCompact)\n    )}\n    </DashboardConsumer>\n  );\n}\n\n\nexport default withStyles(styles)(TableRow);\n","`use strict`\n\nimport * as React from 'react';\nimport { compose } from 'redux';\nimport { withStyles, createStyles, WithStyles, Theme } from '@material-ui/core/styles';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\nconst styles = (theme:Theme) => createStyles({\n  root: {\n    position: \"relative\",\n    width: \"100%\",\n    padding: theme.spacing.unit * 2\n  },\n  closeBtn: {\n    position: \"absolute\",\n    width: \"100%\",\n    textAlign: \"right\",\n    cursor: \"pointer\",\n    padding: theme.spacing.unit * 2,\n    left: 0,\n    top: \"5px\"\n  },\n  divider: {\n    marginTop: \"5px\"\n  }\n});\n\ninterface TitleBarProps {\n  title: string;\n  canClose?: boolean;\n}\ninterface TitleBarPropsWithHoc extends TitleBarProps, WithStyles<typeof styles>, RouteComponentProps<any> {}\n\nconst TitleBar: React.SFC<TitleBarPropsWithHoc> = ({title, canClose, history, classes}) => {\n  function onClickClose() {\n    if(history.length > 1){\n      history.goBack();\n    }\n  }\n\n  return (\n    <div className={classes.root}>\n      <Typography variant=\"h5\" component=\"h5\">\n        {title}\n      </Typography>\n      {canClose &&\n        (<div className={classes.closeBtn}>\n          <CloseIcon onClick={onClickClose}/>\n        </div>)\n      }\n      <Divider className={classes.divider}/>\n    </div>\n  );\n}\n\nconst enhance = compose<React.SFC<TitleBarProps>>(\n  withRouter,\n  withStyles(styles)\n);\n\nexport default enhance(TitleBar);\n","`use strict`\n\nimport * as React from 'react';\nimport produce from \"immer\";\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Button from '@material-ui/core/Button';\n\ninterface OptionModal {\n  label: string,\n  handleClick: () => void\n}\n\ninterface PopupMenuProps {\n  id: string;\n  btnLabel: string,\n  options: Array<OptionModal>;\n}\n\ninterface PopupMenuState {\n  anchorEl: HTMLElement;\n}\n\nclass PopupMenu extends React.Component<PopupMenuProps, PopupMenuState> {\n  constructor(props:PopupMenuProps) {\n    super(props);\n    this.state = {\n      anchorEl: null\n    }\n  }\n\n  _handleClick = (event: React.MouseEvent<any>) => {\n    const target = event.currentTarget;\n    this.setState(\n      produce<PopupMenuState>(draft => {\n        draft.anchorEl = target;\n      })\n    );\n  }\n\n  _handleClose = (optionClickEvent:() => void) => () => {\n    this.setState(\n      produce<PopupMenuState>(draft => {\n        draft.anchorEl = null;\n\n        if(optionClickEvent != null) {\n          optionClickEvent();\n        }\n      })\n    );\n  };\n\n  render() {\n    const {anchorEl} = this.state;\n    const {id, btnLabel, options} = this.props;\n\n    return (\n      <React.Fragment>\n        <Button variant=\"contained\" onClick={this._handleClick} id={id}>\n          {btnLabel}\n        </Button>\n        <Menu\n          id={id}\n          anchorEl={anchorEl}\n          open={Boolean(anchorEl)}\n          onClose={this._handleClose(null)}\n          PaperProps={{\n              style: {\n                maxHeight: 300,\n                width: 200,\n                marginLeft: '20px'\n              },\n            }}\n        >\n          {options.map((option:OptionModal, idx:number) => (\n            <MenuItem key={`${option.label}_${idx}`} onClick={this._handleClose(option.handleClick)}>\n              {option.label}\n            </MenuItem>\n          ))}\n        </Menu>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default PopupMenu;\n","`use strict`\n\n/**\n * Creates a helper Panel to list all children in an orderly manner.\n **/\n\nimport * as React from 'react';\nimport { withStyles, createStyles, WithStyles, Theme } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport SearchIcon from '@material-ui/icons/Search';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport { fade } from '@material-ui/core/styles/colorManipulator';\n\nconst styles = (theme:Theme) => createStyles({\n  root: {\n    marginLeft: theme.spacing.unit\n  }\n});\n\ninterface SearchTextFieldProps extends WithStyles<typeof styles> {\n  callbackForSearchTextChanged: (searchText:string)=>void;\n  handleSearchClick: ()=>void;\n  displaySearchText: string;\n  id?: string;\n}\n\nconst SearchTextField: React.SFC<SearchTextFieldProps> =\n      ({callbackForSearchTextChanged, handleSearchClick, displaySearchText, id, classes}) => {\n\n  function handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const text = event.target.value;\n    callbackForSearchTextChanged(text);\n  }\n\n  return (\n    <TextField\n      className={classes.root}\n      id={id}\n      label={displaySearchText}\n      variant=\"outlined\"\n      onChange={handleChange}\n      InputProps={{\n        startAdornment: (\n          <InputAdornment position=\"start\">\n            <SearchIcon />\n          </InputAdornment>\n        ),\n        endAdornment: (\n          <InputAdornment position=\"end\">\n            <Button variant=\"contained\" color=\"primary\" onClick={handleSearchClick}>\n              Search\n            </Button>\n          </InputAdornment>\n        ),\n      }}\n      />\n  );\n}\n\nexport default withStyles(styles)(SearchTextField);\n","`use strict`\n\nimport * as React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper'; \nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport { withStyles, createStyles, WithStyles, Theme } from '@material-ui/core/styles';\nimport TableRow from '../../TableRow';\nimport SortableTable from '../../SortableTable';\nimport {SelectableTableType} from '../../SortableTable';\n\nconst styles = (theme:Theme) => createStyles({\n  root: {\n    marginTop: theme.spacing.unit * 2,\n    ...theme.mixins.gutters()\n  }\n});\n\ninterface DetailProps extends WithStyles<typeof styles> {\n}\n\nconst Detail: React.SFC<DetailProps> = ({classes}) => {\n\n  return (\n    <Paper className={classes.root}>\n      <Typography variant=\"subtitle1\">Detail - HardCoded</Typography>\n      <Divider/>\n      <Table>\n        <TableBody>\n          <TableRow>\n            <TableCell>Set Description</TableCell>\n            <TableCell>BOSS Replication Capture control critical Status set</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>System</TableCell>\n            <TableCell>BOSS</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Component</TableCell>\n            <TableCell>BOSS</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Instance Id</TableCell>\n            <TableCell></TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Category</TableCell>\n            <TableCell>Hardware Status</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Category Description</TableCell>\n            <TableCell>Hardware Status</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Details</TableCell>\n            <TableCell>Unable to get DB Connection</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Time timeReceived</TableCell>\n            <TableCell>Dec 10, 2018 12:13:51 PM</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Auto-Clear</TableCell>\n            <TableCell>False</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Persistence</TableCell>\n            <TableCell>True</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Event Date and Time</TableCell>\n            <TableCell>Dec 10, 2018 12:13:51 PM</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Event Component Type</TableCell>\n            <TableCell>BOSS Replication</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Event Component Category</TableCell>\n            <TableCell>Retail\\SelfCheckout\\BOSS</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Event Component Instance</TableCell>\n            <TableCell></TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Event Condition</TableCell>\n            <TableCell>Capture Control</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Event Condition Value</TableCell>\n            <TableCell>Failed</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Event Text</TableCell>\n            <TableCell>Unable to get DB Connection</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Event Source</TableCell>\n            <TableCell>BOSS</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Event Category</TableCell>\n            <TableCell>Alert</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Event Sender Name</TableCell>\n            <TableCell>Store01-BOSS</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>Event Detail</TableCell>\n            <TableCell>Unable to get connection to database initializing replication</TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n    </Paper>\n  )\n}\n\nexport default withStyles(styles)(Detail);\n","`use strict`\n\nimport * as React from 'react';\nimport produce from \"immer\";\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport FolderIcon from '@material-ui/icons/Folder';\nimport { withStyles, createStyles, WithStyles, Theme } from '@material-ui/core/styles';\nimport SortableTable from '../../SortableTable';\nimport {SelectableTableType} from '../../SortableTable';\nimport HelperPanel from \"../../HelperPanel\";\nimport SearchTextField from \"../../SearchTextField\";\nimport ButtonPopupMenu from \"../../ButtonPopupMenu\";\nimport TitleBar from \"../../TitleBar\";\nimport Detail from \"./Detail\";\n\nconst styles = (theme:Theme) => createStyles({\n  root: {\n    ...theme.mixins.gutters()\n  },\n  paper: {\n    ...theme.mixins.gutters(),\n    paddingTop: theme.spacing.unit * 2,\n    paddingBottom: theme.spacing.unit * 2,\n  },\n  buttonContainer: {\n    paddingTop: theme.spacing.unit * 8,\n    paddingBottom: theme.spacing.unit * 3,\n    display: \"flex\",\n    alignItems: \"center\",\n    \"& > button\": {\n      marginRight: theme.spacing.unit\n    }\n  }\n});\n\ninterface TNotificationAlertProps extends WithStyles<typeof styles> {\n}\n\ninterface TNotificationAlertFormProps extends TNotificationAlertProps {\n  setShowDisplayError: (toShow: boolean) => () => void;\n  callbackForRowClick: (idx:string) => void;\n}\n\ninterface TNotificationAlertState {\n  dialogOpen: boolean;\n  showDetail: boolean;\n}\n\nconst TNotificationAlertForm: React.SFC<TNotificationAlertFormProps> = ({classes, setShowDisplayError, callbackForRowClick}) => {\n  const data = [\n    {id:0, name:'Unable to get DB Connection', severity: 'Critical', system: \"BOSS\", component: \"BOSS\", category: \"Hardware Status\", timeReceived: \"Dec 10, 2018 12:12\", details:\"Unable to get DB Connection\"}\n  ];\n  const header = [\n    { uniqueDataKey: 'name', numeric: false, label: 'Name' },\n    { uniqueDataKey: 'severity', numeric: false, label: 'Severity' },\n    { uniqueDataKey: 'system', numeric: false, label: 'System' },\n    { uniqueDataKey: 'component', numeric: false, label: 'Component' },\n    { uniqueDataKey: 'category', numeric: false, label: 'Category' },\n    { uniqueDataKey: 'timeReceived', numeric: false, label: 'Time Received' },\n    { uniqueDataKey: 'details', numeric: false, label: 'Details' }\n  ]\n  const rowsPerPage = 5;\n\n  return (\n    <Grid container>\n      <TitleBar title=\"System Alert\" canClose={true}/>\n      <Grid item xs={12} className={classes.root}>\n        <Paper className={classes.paper}>\n          <Typography variant=\"body2\">\n            View the active status reported for all discovered system.\n          </Typography>\n          <div className={classes.buttonContainer}>\n            <ButtonPopupMenu\n              id = \"actions\"\n              btnLabel = \"Actions...\"\n              options = {\n                [\n                  { label: \"Delete\", handleClick: () => {} },\n                  { label: \"Ignore\", handleClick: () => {} }\n                ]\n              }\n            />\n            <Button variant=\"contained\" color=\"primary\" onClick={setShowDisplayError(true)}>\n              Refresh\n            </Button>\n            <Button variant=\"contained\" color=\"primary\" onClick={() => alert(\"Download as CSV\")}>\n              <FolderIcon fontSize=\"small\" />\n            </Button>\n            <SearchTextField\n              callbackForSearchTextChanged={()=>{}}\n              handleSearchClick={()=>{}}\n              displaySearchText=\"Filter...\"\n            />\n          </div>\n          <div>\n            <SortableTable\n              data={data}\n              header={header}\n              defaultRowsPerPage={rowsPerPage}\n              withPagination={true}\n              withSelection={SelectableTableType.CHECKBOX}\n              callbackForClickableRow={callbackForRowClick}\n              />\n          </div>\n        </Paper>\n      </Grid>\n    </Grid>\n  )\n}\n\nclass TNotificationAlert extends React.PureComponent<TNotificationAlertProps, TNotificationAlertState> {\n  constructor(props:TNotificationAlertProps) {\n    super(props);\n    this.state = {\n      dialogOpen: false,\n      showDetail: false\n    }\n  }\n\n  _displayError = (toShow:boolean) => () => {\n    this.setState(\n      produce<TNotificationAlertState>(draft => {\n        draft.dialogOpen = toShow;\n      })\n    );\n  }\n\n  _handleClose = () => {\n    this.setState(\n      produce<TNotificationAlertState>(draft => {\n        draft.dialogOpen = false;\n      })\n    );\n  }\n\n  _detailClick = (idx:string) => {\n    this.setState(\n      produce<TNotificationAlertState>(draft => {\n        draft.showDetail = true;\n      })\n    );\n  }\n\n  render() {\n    const {classes} = this.props;\n    const {showDetail} = this.state;\n\n    return (\n      <React.Fragment>\n        <TNotificationAlertForm {...this.props}\n          setShowDisplayError={this._displayError}\n          callbackForRowClick={this._detailClick}/>\n        {showDetail &&\n          <Detail/>\n        }\n        <Dialog\n          open={this.state.dialogOpen}\n          onClose={this._handleClose}\n          aria-labelledby=\"alert-dialog-title\"\n          aria-describedby=\"alert-dialog-description\"\n        >\n          <DialogTitle id=\"alert-dialog-title\">\n            Selection error\n          </DialogTitle>\n          <DialogContent>\n            <DialogContentText id=\"alert-dialog-description\">\n              You are required to select records before starting an action.\n            </DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this._handleClose} color=\"primary\">\n              Close\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default withStyles(styles)(TNotificationAlert);\n","import * as React from \"react\";\nimport TNotificationAlert from \"../../../container/TNotificationAlert\";\n\nconst NotificationAlert: React.SFC<any> = () => {\n  return (\n    <TNotificationAlert/>\n  );\n};\n\nexport default NotificationAlert;\n"],"sourceRoot":""}