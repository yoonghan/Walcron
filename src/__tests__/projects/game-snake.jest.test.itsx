import { render, screen, waitFor } from "@testing-library/react"
import "../../__mocks__/routerMock"
import "../../__mocks__/snakeWasmMock"
import GameSnake from "@/pages/projects/game-snake"
import { assertFooter } from "../utils/_footer"
import { assertMenu } from "../utils/_menu"
import userEvent from "@testing-library/user-event"

describe("Snake Game", () => {
  const renderComponent = () => {
    render(<GameSnake />)
  }

  const changeLabelValue = async (label: string, value: number) => {
    const inputElement = screen.getByLabelText(label)
    await userEvent.type(inputElement, `${value}`, {
      initialSelectionStart: 0,
      initialSelectionEnd: 2,
    })
    expect(inputElement).toHaveValue(value)
  }

  // it("should have a menu", async () => {
  //   renderComponent()
  //   await assertMenu()
  // })

  it("should render the page with the important components", async () => {
    renderComponent()
    expect(screen.getByText("Snake Game")).toBeInTheDocument()
    expect(screen.getByText("Loading Game Board")).toBeInTheDocument()
    await waitFor(
      () => {
        expect(screen.queryByText("Loading Game Board")).not.toBeInTheDocument()
      },
      {
        timeout: 3000,
        interval: 1000,
      }
    )
    await changeLabelValue("Snake Speed (sec/100):", 100)
    await changeLabelValue("Snake Size:", 2)
    await changeLabelValue("World Dimension:", 39) //as it's typed, so it's 3 > 2 then 39
    await changeLabelValue("Cell Size:", 15)
  })

  // it("should render the page with footer", () => {
  //   renderComponent()
  //   assertFooter()
  // })
})
