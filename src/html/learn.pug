doctype html
include ../incl/defer
html(lang="en")
  head
    title Learning site
    meta(name="ROBOTS",content="NOINDEX, NOFOLLOW")
    meta(name="description" content="Log entry on Web 2.0/Web 3.0 Learning.")
    include ../incl/meta.incl
    style.
      table {
        border-collapse: collapse;
      }
      table,th,td {
        border: 1px solid black;
      }
      td {
        padding: 5px;
        vertical-align: top;
      }

  body
    h3 Secret page site, if you managed to get here, cool!

    h2 Web 2.0
    table
      tr
        th List
        th Description
        th Purpose
      tr
        td integrity
        td Used in script/links to ensure the CDN content has not changed.
        td Security
      tr
        td crossorigin
        td Used in links tag to ensure crossorigin to send anonymous or not.
        td Security
      tr
        td Page speed
        td User google's https://developers.google.com/speed/ to gain insight on page improvement.
        td Performance

    h2 Scala
    table
      tr
        th Ascriptions
        td Instead of (val x:Byte = 3) or (x:Int).instanceOf[Byte], another good way is 3:Byte which is useful for method.
      tr
        th Sequence
        td def x(a:String*), is sequence, the ascription type for sequence is _*
      tr
        th Convert Map to Seq to TreeMap
        td
          pre import scala.collection.immutable._
            | val map = Map(1->"a", 2->"b")
            | val tree = TreeMap(map.toSeq:_*)
      tr
        th Call by value, Call by name
        td Checkout that the last code is executed if it is by value
          pre List(1,2,3,4,5).map({print("w"); print(_)}) // w12345
            | List(1,2,3,4,5).map(x=>{print("w"); print(_)}) //w1w2w3w4w5
            | List(1,2,3,4,5).map({print(_);print(_)}) //12345
        td This is also true, make sure [variable: =>X], has a space seperate as := is a command.
          pre def something() = {println("call something"); 1}
            | def callByValue(x:Int) = {print("x1="+x);print("x2="+x)}; // call something\nx1=1\nx2=1
            | def callByValue(x: =>Int) = {print("x1="+x);print("x2="+x)}; // callsomething\nx1=1\ncall something\nx2=1
            | def callByValue(x: ()=>Int) = {print("x1="+x);print("x2="+x)}; // callByValue(()=>{something()});callsomething\nx1=1\ncall something\nx2=1

    h2 More about Cats
    table
      tr
        th Usage
        th Description
        th Demo
      tr
        td Traverse
        td Change from Option[String] to String[Option]
        td
          pre import scala.util._
            | import cats.instances.try_._
            | import cats.Traverse
            | import cats.instances.list._
            | val listOfTries: List[Try[String]] = List(Try("a"), Try("b"), Try("c"))
            | val tryOfList = Traverse[List].sequence(listOfTries) // Get Success(List(a,b,c))
            | val listOfTries: List[Try[String]] = List(Try("a"), Try("b"), new Failure(new Exception("exception")))
            | val tryOfList = Traverse[List].sequence(listOfTries) // Get Failure, no success what so ever. Expected!
